height = 2
width = 3
ls()
area = height * width
area
ls()
area
is.*(height)
is.*()
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector1
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
poker_vector2
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector1
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
roulette_vector2
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
length(poker_vector1)
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
length(poker_vector2)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
length(roulette_vector1)
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
length(roulette_vector2)
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Select amounts for profitable roulette days: roulette_profits
roulette_profits <- roulette_vector[roulette_vector > 0]
# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)
# Number of profitable roulette days: num_profitable_days
num_profitable_days <- sum(roulette_vector>0)
num_profitable_days
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
order(y)
?sapply
install.packages("mlbench")
library(mlbench)
data(package = "mlbench")
data("PimaIndiansDiabetes")
head(PimaIndiansDiabetes)
data(iris)
summary(iris)
library(caret)
data(iris)
preprocess<-preprocess(iris[,1:4],method = c("range"))
preprocess<-preProcess(iris[,1:4],method = c("range"))
transformed<-predict(preprocess,iris[,1:4])
summary(transformed)
library(caret)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
library(e1071)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
install.packages(e1071)
install.packages("e1071")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
print(fit)
install.packages("rattle")
setwd("C:/Users/pshrivas/Machine Learning/Part 2 - Regression/Multiple_Linear_Regression/codes")
#Importing Dataset
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
#Encoding Categorical data
dataset$State=factor(dataset$State,
levels=c('New York','California','Florida'),
labels = c(1,2,3))
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit,SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
View(training_set)
View(training_set)
test_set = subset(dataset, split == FALSE)
View(test_set)
regressor = lm(formula = Profit ~ ., data=training_set ) # instead of writing all the independent variable write. R.D.Apend + Administration + Marketing.Spend + State -> .
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data=dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend , data=dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  + Marketing.Spend , data=dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend , data=dataset)
summary(regressor)
setwd("C:/Users/pshrivas/Machine Learning/Part 2 - Regression/Polynomial Regression/Codes")
dataset = read.csv('Position_Salaries.csv')
library(caTools)
source('C:/Users/pshrivas/Machine Learning/Part 2 - Regression/Polynomial Regression/Codes/Polynomial_regression.r')
View(dataset)
View(dataset)
dataset = dataset[,2:3]
View(dataset)
View(dataset)
lin_reg = lm(formula = Salary ~ Level,
data = dataset)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
View(dataset)
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
dataset$Level2 = dataset$Level^3
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
dataset$Level2 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
View(dataset)
View(dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
library(ggplot2)
ggplot()+geom(aes(x=dataset$Level,y=dataset$Salary))
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary))
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+title()+xlab("Level")+ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+xlab("Level")+ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+xlab("Level")+ylab("Salary")+geom_line(aes(x=dataset$Level,y=predict(lin_reg)))
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(lin_reg)),color="blue")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level3,y=predict(poly_reg)),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(poly_reg)),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
#Visualize Polynomial Regression Results
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(poly_reg)),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
View(dataset)
View(dataset)
#Importing Dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
# Splitting dataset into Training set and test set
# install.packages("caTools")
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Purchased,SplitRatio = 0.8) #put split ratio for training set
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set[,2:3] = scale(training_set[,2:3]) #country and purchased is not numeric these are factors
# test_set[,2:3] = scale(test_set[,2:3])
#Fitting Linear Regression to dataset
lin_reg = lm(formula = Salary ~ Level,
data = dataset)
summary(lin_reg)
#Fitting Polynomial Regression to dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
library(ggplot2)
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(lin_reg)),color="blue")+
ggtitle("Truth or Bluff(Linear Regression)")+
xlab("Level")+
ylab("Salary")
#Visualize Polynomial Regression Results
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(poly_reg)),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . , data=dataset,)
summary(poly_reg)
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=dataset$Level,y=predict(poly_reg)),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
y_pred = predict(lin_reg,newdata = 6.5)
y_pred = predict(lin_reg, data.frame(Level=6.5))
predict(poly_reg,data.frame(Level = 6.5,Level2=6.5^2, Level3=6.5^3, Level4=6.5^4))
X_grid = seq(min(dataset$Level),max(datset$Level), 0.1)
X_grid = seq(min(dataset$Level),max(dataset$Level), 0.1)
X_grid = seq(min(dataset$Level),max(dataset$Level), 0.1)
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid,y=predict(poly_reg, newdata = data.frame(X_grid))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
X_grid = seq(min(dataset$Level),max(dataset$Level), 0.1)
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
X_grid = seq(min(dataset$Level),max(dataset$Level), 0.1)
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid,Level2 = X_grid^2,Level3=Level = X_grid^3,Level4=Level = X_grid^4))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid, Level2 =X_grid^2))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid, Level2 =X_grid^2,Level3=X_grid^3))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
ggplot()+geom_point(aes(x=dataset$Level,y=dataset$Salary),color="red")+
geom_line(aes(x=X_grid, y=predict(poly_reg, newdata = data.frame(Level = X_grid, Level2 =X_grid^2,Level3=X_grid^3,Level4=X_grid^4))),color="blue")+
ggtitle("Truth or Bluff(Polynomial Regression)")+
xlab("Level")+
ylab("Salary")
