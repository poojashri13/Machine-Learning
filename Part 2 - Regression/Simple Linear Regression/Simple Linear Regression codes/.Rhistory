height = 2
width = 3
ls()
area = height * width
area
ls()
area
is.*(height)
is.*()
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector1
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
poker_vector2
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector1
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
roulette_vector2
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
length(poker_vector1)
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
length(poker_vector2)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
length(roulette_vector1)
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
length(roulette_vector2)
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Select amounts for profitable roulette days: roulette_profits
roulette_profits <- roulette_vector[roulette_vector > 0]
# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)
# Number of profitable roulette days: num_profitable_days
num_profitable_days <- sum(roulette_vector>0)
num_profitable_days
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
order(y)
?sapply
install.packages("mlbench")
library(mlbench)
data(package = "mlbench")
data("PimaIndiansDiabetes")
head(PimaIndiansDiabetes)
data(iris)
summary(iris)
library(caret)
data(iris)
preprocess<-preprocess(iris[,1:4],method = c("range"))
preprocess<-preProcess(iris[,1:4],method = c("range"))
transformed<-predict(preprocess,iris[,1:4])
summary(transformed)
library(caret)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
library(e1071)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
install.packages(e1071)
install.packages("e1071")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
print(fit)
install.packages("rattle")
setwd("C:/Users/pshrivas/Machine Learning/Part 1 - Data PreProcessing/Data Processing")
dataset = read.csv('Data.csv')
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary, FUN=function(x)mean(x,na.rm=TRUE)),dataset$Salary)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN=function(x)mean(x,na.rm=TRUE)),dataset$Salary)
?ave
dataset$Country=factor(dataset$Country,levels=c('France','Spain','Germany'),labels = c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,levels=c('Yes','No'),labels = c(1,0))
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
ning_set)
test_set = scale(test_set
training_set = scale(training_set)
test_set = scale(test_set)
training_set = scale(training_set[,2:3]) #country and purchased is not numeric these are factors
test_set = scale(test_set[,2:3])
training_set[,2:3] = scale(training_set[,2:3]) #country and purchased is not numeric these are factors
test_set[,2:3] = scale(test_set[,2:3])
dataset = read.csv('Data.csv')
#Taing care of Missing Values
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN=function(x)mean(x,na.rm=TRUE)),dataset$Salary)
?ave
#Encoding Categorical data
dataset$Country=factor(dataset$Country,levels=c('France','Spain','Germany'),labels = c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,levels=c('Yes','No'),labels = c(1,0))
#Splitting dataset into Training set and test set
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.8) #put split ratio for training set
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[,2:3] = scale(training_set[,2:3]) #country and purchased is not numeric these are factors
test_set[,2:3] = scale(test_set[,2:3])
setwd("C:/Users/pshrivas/Machine Learning/Part 2 - Regression/Simple Linear Regression/Simple Linear Regression codes")
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
View(test_set)
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary,SplitRatio = 2/3)
View(training_set)
View(test_set)
dataset = read.csv('Salary_Data.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary,SplitRatio = 2/3) #put split ratio for training set
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience , data = training_set)
summary(regressor)
y_pred -> predict(regressor,newdata = test_set)
y_pred <- predict(regressor,newdata = test_set)
View(dataset)
View(test_set)
y_pred
library(ggplot2)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot()+
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
color="red") +
geom_line(aes(x=training_set$YearsExperience, y = predict(regressor,newdata = training_set)),color="blue")
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
color="red") +
geom_line(aes(x=training_set$YearsExperience, y = predict(regressor,newdata = training_set)),color="blue")+
ggtitle('Salary vs Experience(Training set)')+xlab("Years of Experience")+ylab("salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience,y=test_set$Salary), color="red")+
geom_line(aes(training_set$YearsExperience,y=predict(regressor,newdata = training_set)),color="blue")+
ggtitle('Salary vs Experience(Test set)')+xlab("Years of Experience")+ylab("salary")
ggplot()+
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
color="red") +
geom_line(aes(x=training_set$YearsExperience, y = predict(regressor,newdata = training_set)),color="blue")+
ggtitle('Salary vs Experience(Training set)')+xlab("Years of Experience")+ylab("salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience,y=test_set$Salary), color="red")+
geom_line(aes(training_set$YearsExperience,y=predict(regressor,newdata = training_set)),color="blue")+
ggtitle('Salary vs Experience(Test set)')+xlab("Years of Experience")+ylab("salary")
