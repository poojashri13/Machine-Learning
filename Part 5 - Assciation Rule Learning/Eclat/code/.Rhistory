height = 2
width = 3
ls()
area = height * width
area
ls()
area
is.*(height)
is.*()
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector1
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
poker_vector2
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector1
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
roulette_vector2
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
length(poker_vector1)
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
length(poker_vector2)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
length(roulette_vector1)
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
length(roulette_vector2)
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Select amounts for profitable roulette days: roulette_profits
roulette_profits <- roulette_vector[roulette_vector > 0]
# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)
# Number of profitable roulette days: num_profitable_days
num_profitable_days <- sum(roulette_vector>0)
num_profitable_days
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
order(y)
?sapply
install.packages("mlbench")
library(mlbench)
data(package = "mlbench")
data("PimaIndiansDiabetes")
head(PimaIndiansDiabetes)
data(iris)
summary(iris)
library(caret)
data(iris)
preprocess<-preprocess(iris[,1:4],method = c("range"))
preprocess<-preProcess(iris[,1:4],method = c("range"))
transformed<-predict(preprocess,iris[,1:4])
summary(transformed)
library(caret)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
library(e1071)
data("iris")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
install.packages(e1071)
install.packages("e1071")
trainControl <- trainControl(method = "cv", number = 10)
fit <- train(Species~.,data=iris, trControl=trainControl,method = "nb")
print(fit)
install.packages("rattle")
library(XML)
#Parse XML file
data <- xmlTreeParse("ProjectMSP.xml", useInternalNodes = T )
root=xmlRoot(data)
setwd("~/")
library(XML)
#Parse XML file
data <- xmlTreeParse("ProjectMSP.xml", useInternalNodes = T )
root=xmlRoot(data)
library(XML)
data <- xmlTreeParse("ProjectMSP.xml", useInternalNodes = T )
library(XML)
data <- xmlTreeParse("ProjectMSP.xml", useInternalNodes = T )
root=xmlRoot(data)
library(XML)
#Parse XML file
data <- xmlTreeParse("ProjectMSP.xml", useInternalNodes = T )
root=xmlRoot(data)
library(XML)
#Parse XML file
data <- xmlTreeParse("MSP.xml", useInternalNodes = T )
root=xmlRoot(data)
setwd("C:/Users/pshrivas/Machine Learning/Part 5 - Assciation Rule Learning/Apriori/code")
#install.packages("arules")
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header=F)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep=",", rm.duplicates = TRUE)
itemFrequencyPlot(dataset, topN=10)
summary(dataset)
3*7/7500
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
rules
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(rules[1:10])
inspect(sort(rules[1:10]))
inspect(sort(rules, by="lift[1:10]))
inspect(sort(rules, by="lift"[1:10]))
inspect(sort(rules, by="lift")[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
inspect(sort(rules, by="lift")[1:10])
4*7/7500
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
inspect(sort(rules, by="lift")[1:10])
install.packages("recommenderlab")
library(recommenderlab)
dataset
recommenderRegistry$get_entry_names()
recModel = Recommender(dataset, method = "AR_binaryRatingMatrix")
library(recommenderlab)
recModel = Recommender(dataset, method = "AR_binaryRatingMatrix")
recModel = Recommender(dataset, method = rules)
matrix = as(dataset,"realRatingMatrix")
dataset = read.csv("Market_Basket_Optimisation.csv", header=F)
matrix = as(dataset,"realRatingMatrix")
recModel = Recommender(matrix[1:1402],method="UBCF")
summary(matrix)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep=",", rm.duplicates = TRUE)
matrix = as(dataset,"realRatingMatrix")
recModel = Recommender(matrix,method="UBCF")
recModel = Recommender(dataset,method="UBCF")
image(dataset)
rules
plot(rules)
install.packages("arulesViz")
image(dataset)
plot(rules)
library(arulesViz)
plot(rules)
inspect(sort(rules, by="lift")[1:10])
rules = apriori(data = dataset, parameter = list(minlen=2 ,support = 0.004, confidence = 0.2))
inspect(sort(rules, by="lift")[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2, target="rules"))
inspect(sort(rules, by="lift")[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2, target="frequent itemsets"))
inspect(sort(rules, by="lift")[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2, target="frequent itemsets"))
inspect(sort(rules, by="lift")[1:10])
inspect((rules, by="lift")[1:10])
inspect((rules by="lift")[1:10])
inspect(rules[1:10])
inspect(sort(rules[1:10]))
%reset -f
%reset -f
reset -f
setwd("C:/Users/pshrivas/Machine Learning/Part 5 - Assciation Rule Learning/Eclat/code")
library(arules)
dataset = read.csv("Market_Based_Optimisation.csv", header = F)
dataset = read.csv("Market_Baskt_Optimisation.csv", header = F)
dataset = read.csv("Market_Basket_Optimisation.csv", header = F)
View(dataset)
View(dataset)
dataset = read.transactions("Market_Basket_Optimisaton.csv", sep=",",rm.duplicates = T)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep=",",rm.duplicates = T)
summary(dataset)
itemFrequencyPlot(dataset, topN=10)
rules = eclat(dataset, parameter = list(support=0.004, minlen=2))
inspect(rules)
inspect(sort(rules, by="support")[1:10)]
inspect(sort(rules, by="support")[1:10])
rules = eclat(dataset, parameter = list(support=0.003, minlen=2))
inspect(sort(rules, by="support")[1:10])
