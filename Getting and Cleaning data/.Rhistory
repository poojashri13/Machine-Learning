height = 2
width = 3
ls()
area = height * width
area
ls()
area
is.*(height)
is.*()
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector1
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
poker_vector2
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
roulette_vector1
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
roulette_vector2
poker_vector1 <- c(140, -50, 20, -120, 240)
names(poker_vector1) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
length(poker_vector1)
poker_vector2 <- c(Monday = 140, -50, 20, -120, 240)
length(poker_vector2)
roulette_vector1 <- c(-24, -50, 100, -350, 10)
days_vector <- names(poker_vector1)
names(roulette_vector1) <- days_vector
length(roulette_vector1)
roulette_vector2 <- c(-24, -50, 100, -350, 10)
names(roulette_vector2) <- "Monday"
length(roulette_vector2)
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Select amounts for profitable roulette days: roulette_profits
roulette_profits <- roulette_vector[roulette_vector > 0]
# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)
# Number of profitable roulette days: num_profitable_days
num_profitable_days <- sum(roulette_vector>0)
num_profitable_days
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
x = c(1,2,3,4,5)
y = c(T,F,T,F,T)
x[y]
order(y)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileURl,destfile="E:\\PracticalML\\cameras.csv",method="curl")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="E:\\PracticalML\\cameras.csv",method="curl")
download.file(fileUrl,destfile=".E:\\PracticalML\\cameras.csv",method="curl")
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile=".E:\\PracticalML\\cameras.csv",method="curl")
download.file(fileUrl,destfile="E:\\PracticalML\\cameras.csv",method="curl")
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru#Download"
download.file(fileUrl,destfile="E:\\PracticalML\\cameras.csv",method="curl")
download.file(fileUrl,destfile="./cameras.csv",method="curl")
?download.file
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru#Download"
download.file(fileUrl,destfile="./cameras.csv",method="auto")
download.file(fileUrl,destfile="E:\\PracticalML\\cameras.csv",method="auto")
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/rows.csv?accessType=Download"
download.file(fileUrl,destfile="E:\\PracticalML\\cameras.csv",method="auto")
download.file(fileUrl,destfile="E:\\PracticalML\\cameras1.csv",method="auto")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="E:\\PracticalML\\cameras1.csv",method="auto")
list.files("E:\\PracticalML")
dateDownloaded <-date()
dateDownloaded
cameraData<- read.table("E:\\PracticalML\\cameras1.csv")
cameraData<- read.table("E:\\PracticalML\\cameras1.csv",sep=",", header = TRUE)
head(cameraData)
cameraData <- read.csv("E:\\PracticalML\\cameras1.csv")
head(cameraData)
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true"
download.file(url,destfile = "E:\\PracticalML\\cameras.xlsx")
downloadDate <- date()
downloadDate
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
cameraData<-read.xlsx("cameras.xlsx")
cameraData<-read.xlsx("E:\\PracticalML\\cameras.xlsx")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD&bom=true"
download.file(url,destfile = "E:\\PracticalML\\cameras.xlsx")
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD&bom=true"
download.file(url,destfile = "E:\\PracticalML\\cameras.xlsx")
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true"
download.file(url,destfile = "E:\\PracticalML\\cameras.xlsx")
downloadDate <- date()
downloadDate
library(xlsx)
cameraData<-read.xlsx("E:\\PracticalML\\cameras.xlsx")
cameraData<-read.xlsx("E:\\PracticalML\\cameras.xlsx",sheetIndex = 1, header = TRUE)
camera<-read.xlsx("E:\\PracticalML\\cameras.xlsx",sheetIndex = 1, header = TRUE)
camera<-read.xlsx2("E:\\PracticalML\\cameras.xlsx",sheetIndex = 1, header = TRUE)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
sourceUrl <- "https://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
file <- htmlTreeParse(sourceUrl,useInternal = TRUE)
sourceUrl <- "https://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
file <-htmlTreeParse(sourceUrl,useInternal = TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("curl")
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
myjson <- toJSON(iris,pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
install.packages("data.table")
library(data.table)
DF <- data.frame(x = rnorm(9),y = rep(c("a","b","c"),each = 3),z=rnorm(9))
head(DF,3)
tables()
DT <- data.table(x = rnorm(9),y=c("a","b","c"),each=3),z = rnorm(9))
DT <- data.table(x = rnorm(9),y=rep(c("a","b","c"),each=3),z = rnorm(9))
head(DT,3)
tables()
DT[,2]
DT[2,]
DT[DT$y=="a"]
DT[,c(2,3)]
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,w:=z^2]
DT$w
DT
DT2 <- DT
DT[2,]
DT[,y:=2]
DT2 <- DT
DT[2,]
head(DT,n=3)
head(DT2,3)
DT[,m:={tmp<-(x+z);log2(tmp+5)}]
DT
DT[,a:=x>0]
DT
DT[,b:=mean(x+w),by=a]
DT
set.seed(123)
DT<-data.table(x = sample(letters[1:3],1ES,TRUE))
DT<-data.table(x = sample(letters[1:3],1E5,TRUE))
DT[,.N,by = x]
setkey(DT,x)
DT['a']
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran , ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version =="3.1.1",country == "US")
?Comparision
?comparision
?Comparison
filter(cran,country == "IN",r_version <="3.0.2")
finter(cran,country == "US"|country == "IN")
filter(cran,country == "US"|country == "IN")
filter(cran,size>100500 & r_os == "linux-gnu")
filter(cran,size>100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb = size_mb / 2^10)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb = size_mb / 2^10)
mutate(cran3,size_mb=size/2^20 ,size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size + 1000)
summerize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
group_by(cran,by_package)
group_by(cran,package)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
swirl()
submit()
library(dplyr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,destfile = "E://Getting and cleaning data//first.csv")
setwd("E://Getting and cleaning data")
data <-read.csv("first.csv")
data$val > 1,000,000
data$val > 1000000
data$val >= 1000000
data$val >= data[1000000]
sum(data$val >= 1000000)
data$VAL
data$VAL >= 1000000
sum[data$VAL >= 1000000]
sum(data$VAL >= 1000000)
data$VAL > =1000000
data$VAL >=1000000
data$VAL[data$VAL >=1000000]
newdata <- na.omit(data$VAL)
newdata
newdata >=1000000
sum(newdata >=1000000)
newdata
?na.omit
data <-read.csv("first.csv",stringsAsFactors = T)
data
head(data)
swirl()
swirl()
library(swirl)
swirl()
load(swirl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
my_df<-read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df((mydf))
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(ip_id,package,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version == "3.1.1",country == "US")
?comparison
?Comparison
filter(cran,country == "IN", r_version <= "3.0.2")
filter(cran,country == "US" | country == "IN")
filter(cran,size>100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
